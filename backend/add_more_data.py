#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º—É VRPTW
"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
import random
from app.core.config import settings
from app.models.order import Order, OrderStatus, OrderPriority
from app.models.vehicle import Vehicle, VehicleType, VehicleStatus
from app.models.customer import Customer
from app.models.driver import Driver

def create_session():
    engine = create_engine(settings.database_url, connect_args={"check_same_thread": False})
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return SessionLocal()

def add_customers(db, count=5):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    customers = []
    customer_data = [
        {"name": "–û–û–û –õ–æ–≥–∏—Å—Ç–∏–∫ –ü–ª—é—Å", "phone": "+7-495-123-4567", "email": "info@logistic-plus.ru", 
         "address": "—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15", "city": "–ú–æ—Å–∫–≤–∞", "postal_code": "125009",
         "latitude": 55.7558, "longitude": 37.6176},
        {"name": "–ò–ü –ü–µ—Ç—Ä–æ–≤ –ê.–í.", "phone": "+7-812-987-6543", "email": "petrov@mail.ru",
         "address": "–ù–µ–≤—Å–∫–∏–π –ø—Ä., 28", "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "postal_code": "191025",
         "latitude": 59.9311, "longitude": 30.3609},
        {"name": "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º –°–∏–±–∏—Ä—å", "phone": "+7-383-555-0123", "email": "td.sibir@yandex.ru",
         "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 45", "city": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "postal_code": "630007",
         "latitude": 55.0084, "longitude": 82.9357},
        {"name": "–ö–æ–º–ø–∞–Ω–∏—è –í–æ—Å—Ç–æ–∫", "phone": "+7-423-777-8899", "email": "vostok@company.ru",
         "address": "—É–ª. –°–≤–µ—Ç–ª–∞–Ω—Å–∫–∞—è, 67", "city": "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "postal_code": "690091",
         "latitude": 43.1056, "longitude": 131.8735},
        {"name": "–Æ–∂–Ω—ã–π –≠–∫—Å–ø—Ä–µ—Å—Å", "phone": "+7-861-444-5566", "email": "south@express.ru",
         "address": "—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 122", "city": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "postal_code": "350000",
         "latitude": 45.0355, "longitude": 38.9753}
    ]
    
    for data in customer_data[:count]:
        customer = Customer(**data)
        db.add(customer)
        customers.append(customer)
    
    db.commit()
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(customers)} –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    return customers

def add_vehicles(db, count=5):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
    vehicles = []
    vehicle_data = [
        {"license_plate": "–ê123–ë–í77", "model": "–ì–∞–∑–µ–ª—å Next", "brand": "–ì–ê–ó", "year": 2023,
         "vehicle_type": VehicleType.VAN, "max_weight_capacity": 1500.0, "max_volume_capacity": 9.0,
         "fuel_consumption": 12.5, "depot_latitude": 55.7558, "depot_longitude": 37.6176},
        {"license_plate": "–í456–ì–î78", "model": "Sprinter", "brand": "Mercedes", "year": 2022,
         "vehicle_type": VehicleType.VAN, "max_weight_capacity": 2000.0, "max_volume_capacity": 12.0,
         "fuel_consumption": 10.8, "depot_latitude": 55.7558, "depot_longitude": 37.6176},
        {"license_plate": "–ï789–ñ–ó99", "model": "Atego", "brand": "Mercedes", "year": 2021,
         "vehicle_type": VehicleType.TRUCK, "max_weight_capacity": 7500.0, "max_volume_capacity": 35.0,
         "fuel_consumption": 18.2, "depot_latitude": 55.7558, "depot_longitude": 37.6176},
        {"license_plate": "–ö012–õ–ú50", "model": "–í–∞–ª–¥–∞–π", "brand": "–ì–ê–ó", "year": 2020,
         "vehicle_type": VehicleType.TRUCK, "max_weight_capacity": 4000.0, "max_volume_capacity": 20.0,
         "fuel_consumption": 15.5, "depot_latitude": 55.7558, "depot_longitude": 37.6176},
        {"license_plate": "–ù345–û–ü61", "model": "Transit", "brand": "Ford", "year": 2023,
         "vehicle_type": VehicleType.VAN, "max_weight_capacity": 1800.0, "max_volume_capacity": 10.5,
         "fuel_consumption": 11.2, "depot_latitude": 55.7558, "depot_longitude": 37.6176}
    ]
    
    for data in vehicle_data[:count]:
        data["status"] = VehicleStatus.AVAILABLE
        data["has_gps"] = True
        data["has_temperature_control"] = random.choice([True, False])
        data["has_lift_gate"] = random.choice([True, False])
        data["max_working_hours"] = 8
        data["requires_break_every"] = 4
        data["break_duration"] = 30
        
        vehicle = Vehicle(**data)
        db.add(vehicle)
        vehicles.append(vehicle)
    
    db.commit()
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(vehicles)} –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
    return vehicles

def add_orders(db, customers, count=10):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"""
    orders = []
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –ú–æ—Å–∫–≤—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    moscow_locations = [
        (55.7558, 37.6176, "–¶–µ–Ω—Ç—Ä"),
        (55.8431, 37.6156, "–°–µ–≤–µ—Ä–Ω—ã–π –æ–∫—Ä—É–≥"),
        (55.6761, 37.5775, "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π –æ–∫—Ä—É–≥"),
        (55.7887, 37.7473, "–í–æ—Å—Ç–æ—á–Ω—ã–π –æ–∫—Ä—É–≥"),
        (55.7033, 37.5297, "–ó–∞–ø–∞–¥–Ω—ã–π –æ–∫—Ä—É–≥"),
        (55.6220, 37.6068, "–Æ–∂–Ω—ã–π –æ–∫—Ä—É–≥"),
        (55.8782, 37.6562, "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –æ–∫—Ä—É–≥"),
        (55.6415, 37.7423, "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –æ–∫—Ä—É–≥")
    ]
    
    for i in range(count):
        customer = random.choice(customers)
        location = random.choice(moscow_locations)
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 3 –¥–Ω–µ–π
        base_date = datetime.now() + timedelta(days=random.randint(0, 3))
        start_hour = random.randint(8, 16)
        
        order_data = {
            "order_number": f"ORD-{datetime.now().strftime('%Y%m%d')}-{i+2:03d}",
            "customer_id": customer.id,
            "delivery_address": f"{location[2]}, –¥–æ–º {random.randint(1, 100)}",
            "delivery_latitude": location[0] + random.uniform(-0.05, 0.05),
            "delivery_longitude": location[1] + random.uniform(-0.05, 0.05),
            "time_window_start": base_date.replace(hour=start_hour, minute=0, second=0),
            "time_window_end": base_date.replace(hour=start_hour + 4, minute=0, second=0),
            "estimated_service_time": random.randint(10, 45),
            "weight": round(random.uniform(10, 500), 2),
            "volume": round(random.uniform(0.1, 5.0), 2),
            "value": round(random.uniform(1000, 50000), 2),
            "status": OrderStatus.PENDING,
            "priority": random.choice(list(OrderPriority))
        }
        
        order = Order(**order_data)
        db.add(order)
        orders.append(order)
    
    db.commit()
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    return orders

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É VRPTW...")
    
    db = create_session()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        existing_customers = db.query(Customer).count()
        existing_vehicles = db.query(Vehicle).count()
        existing_orders = db.query(Order).count()
        
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   - –ö–ª–∏–µ–Ω—Ç—ã: {existing_customers}")
        print(f"   - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {existing_vehicles}")
        print(f"   - –ó–∞–∫–∞–∑—ã: {existing_orders}")
        print()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        customers = add_customers(db, 5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        print("üöõ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤...")
        vehicles = add_vehicles(db, 5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        print("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
        all_customers = db.query(Customer).all()
        orders = add_orders(db, all_customers, 15)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_customers = db.query(Customer).count()
        final_vehicles = db.query(Vehicle).count()
        final_orders = db.query(Order).count()
        
        print()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   - –ö–ª–∏–µ–Ω—Ç—ã: {final_customers} (+{final_customers - existing_customers})")
        print(f"   - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {final_vehicles} (+{final_vehicles - existing_vehicles})")
        print(f"   - –ó–∞–∫–∞–∑—ã: {final_orders} (+{final_orders - existing_orders})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    main()