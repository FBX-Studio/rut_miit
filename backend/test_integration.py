#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ RUT MIIT
"""

import asyncio
import json
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Any
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.driver_management import DriverManagementService
from app.services.route_management import RouteManagementService
from app.services.route_optimization import RouteOptimizationService
from app.services.parameter_modification import ParameterModificationService
from app.services.realtime_simulation import RealtimeSimulationService, EventType
from advanced_test_data_generator import AdvancedTestDataGenerator, TestConfiguration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class IntegrationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self):
        self.driver_service = DriverManagementService()
        self.route_service = RouteManagementService()
        self.optimization_service = RouteOptimizationService()
        self.parameter_service = ParameterModificationService()
        self.simulation_service = RealtimeSimulationService()
        self.test_data_generator = AdvancedTestDataGenerator()
        
        self.test_results = {
            "driver_management": {"passed": 0, "failed": 0, "errors": []},
            "route_management": {"passed": 0, "failed": 0, "errors": []},
            "route_optimization": {"passed": 0, "failed": 0, "errors": []},
            "parameter_modification": {"passed": 0, "failed": 0, "errors": []},
            "realtime_simulation": {"passed": 0, "failed": 0, "errors": []},
            "integration": {"passed": 0, "failed": 0, "errors": []}
        }
    
    def log_test_result(self, module: str, test_name: str, success: bool, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        if success:
            self.test_results[module]["passed"] += 1
            logger.info(f"‚úÖ {module}: {test_name} - PASSED")
        else:
            self.test_results[module]["failed"] += 1
            self.test_results[module]["errors"].append(f"{test_name}: {error}")
            logger.error(f"‚ùå {module}: {test_name} - FAILED: {error}")
    
    async def test_driver_management(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏...")
        
        try:
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
            drivers = await self.driver_service.get_all_drivers()
            self.log_test_result("driver_management", "get_all_drivers", True)
        except Exception as e:
            self.log_test_result("driver_management", "get_all_drivers", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
            available_drivers = await self.driver_service.find_available_drivers(
                location={"lat": 55.7558, "lng": 37.6176},
                radius_km=10.0
            )
            self.log_test_result("driver_management", "find_available_drivers", True)
        except Exception as e:
            self.log_test_result("driver_management", "find_available_drivers", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
            stats = await self.driver_service.get_driver_statistics()
            self.log_test_result("driver_management", "get_driver_statistics", True)
        except Exception as e:
            self.log_test_result("driver_management", "get_driver_statistics", False, str(e))
    
    async def test_route_management(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏...")
        
        try:
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
            route_data = {
                "vehicle_id": 1,
                "driver_id": 1,
                "waypoints": [
                    {"lat": 55.7558, "lng": 37.6176, "address": "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"},
                    {"lat": 55.7500, "lng": 37.6200, "address": "–ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞"}
                ]
            }
            route = await self.route_service.create_route(route_data)
            self.log_test_result("route_management", "create_route", True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            self.test_route_id = route.get("route_id")
            
        except Exception as e:
            self.log_test_result("route_management", "create_route", False, str(e))
            self.test_route_id = None
        
        if self.test_route_id:
            try:
                # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ä—à—Ä—É—Ç–∞
                route_details = await self.route_service.get_route_details(self.test_route_id)
                self.log_test_result("route_management", "get_route_details", True)
            except Exception as e:
                self.log_test_result("route_management", "get_route_details", False, str(e))
            
            try:
                # –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
                await self.route_service.add_waypoint(
                    self.test_route_id,
                    {"lat": 55.7600, "lng": 37.6100, "address": "–ú–æ—Å–∫–≤–∞, –ê—Ä–±–∞—Ç"},
                    1
                )
                self.log_test_result("route_management", "add_waypoint", True)
            except Exception as e:
                self.log_test_result("route_management", "add_waypoint", False, str(e))
    
    async def test_route_optimization(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_points = [
            {"id": "depot", "lat": 55.7558, "lng": 37.6176, "demand": 0, "time_window": (0, 1440)},
            {"id": "customer1", "lat": 55.7500, "lng": 37.6200, "demand": 10, "time_window": (480, 600)},
            {"id": "customer2", "lat": 55.7600, "lng": 37.6100, "demand": 15, "time_window": (540, 720)},
            {"id": "customer3", "lat": 55.7400, "lng": 37.6300, "demand": 8, "time_window": (600, 800)}
        ]
        
        vehicle_constraints = {
            "capacity": 50,
            "max_distance": 100.0,
            "max_time": 480,
            "speed_kmh": 40.0
        }
        
        try:
            # –¢–µ—Å—Ç 1: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–ª–∏–∂–∞–π—à–∏–º —Å–æ—Å–µ–¥–æ–º
            result = await self.optimization_service.optimize_nearest_neighbor(
                test_points, vehicle_constraints
            )
            self.log_test_result("route_optimization", "nearest_neighbor", True)
        except Exception as e:
            self.log_test_result("route_optimization", "nearest_neighbor", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
            result = await self.optimization_service.optimize_genetic_algorithm(
                test_points, vehicle_constraints, population_size=20, generations=10
            )
            self.log_test_result("route_optimization", "genetic_algorithm", True)
        except Exception as e:
            self.log_test_result("route_optimization", "genetic_algorithm", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ê–ª–≥–æ—Ä–∏—Ç–º –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞
            result = await self.optimization_service.optimize_simulated_annealing(
                test_points, vehicle_constraints, max_iterations=100
            )
            self.log_test_result("route_optimization", "simulated_annealing", True)
        except Exception as e:
            self.log_test_result("route_optimization", "simulated_annealing", False, str(e))
    
    async def test_parameter_modification(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            definitions = self.parameter_service.get_parameter_definitions()
            self.log_test_result("parameter_modification", "get_parameter_definitions", True)
        except Exception as e:
            self.log_test_result("parameter_modification", "get_parameter_definitions", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_params = {
                "vehicle_capacity": 100,
                "max_route_distance": 200.0,
                "delivery_time_window": 120,
                "traffic_multiplier": 1.2
            }
            
            scenario_id = self.parameter_service.create_test_scenario(
                "integration_test_scenario",
                scenario_params,
                "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            self.log_test_result("parameter_modification", "create_test_scenario", True)
            self.test_scenario_id = scenario_id
            
        except Exception as e:
            self.log_test_result("parameter_modification", "create_test_scenario", False, str(e))
            self.test_scenario_id = None
        
        if self.test_scenario_id:
            try:
                # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                scenario = self.parameter_service.get_test_scenario(self.test_scenario_id)
                self.log_test_result("parameter_modification", "get_test_scenario", True)
            except Exception as e:
                self.log_test_result("parameter_modification", "get_test_scenario", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤
            presets = self.parameter_service.get_available_presets()
            self.log_test_result("parameter_modification", "get_available_presets", True)
        except Exception as e:
            self.log_test_result("parameter_modification", "get_available_presets", False, str(e))
    
    async def test_realtime_simulation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        
        try:
            # –¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
            await self.simulation_service.start_simulation({
                "update_interval": 5,  # –ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                "traffic_variability": 0.5
            })
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            self.log_test_result("realtime_simulation", "start_simulation", True)
        except Exception as e:
            self.log_test_result("realtime_simulation", "start_simulation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event = self.simulation_service.force_event(EventType.TRAFFIC_CHANGE)
            self.log_test_result("realtime_simulation", "force_event", event is not None)
        except Exception as e:
            self.log_test_result("realtime_simulation", "force_event", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
            conditions = self.simulation_service.get_current_conditions()
            self.log_test_result("realtime_simulation", "get_current_conditions", True)
        except Exception as e:
            self.log_test_result("realtime_simulation", "get_current_conditions", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.simulation_service.get_simulation_statistics()
            self.log_test_result("realtime_simulation", "get_simulation_statistics", True)
        except Exception as e:
            self.log_test_result("realtime_simulation", "get_simulation_statistics", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 5: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
            await self.simulation_service.stop_simulation()
            self.log_test_result("realtime_simulation", "stop_simulation", True)
        except Exception as e:
            self.log_test_result("realtime_simulation", "stop_simulation", False, str(e))
    
    async def test_integration_scenarios(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        try:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            config = TestConfiguration(
                num_customers=10,
                num_drivers=3,
                num_vehicles=3,
                geographic_center=[55.7558, 37.6176],
                geographic_radius=20.0
            )
            
            test_data = self.test_data_generator.generate_comprehensive_test_data(config)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if test_data["orders"]:
                first_order = test_data["orders"][0]
                route_data = {
                    "vehicle_id": 1,
                    "driver_id": 1,
                    "waypoints": [
                        first_order["pickup_location"],
                        first_order["delivery_location"]
                    ]
                }
                
                route = await self.route_service.create_route(route_data)
                
                if route and route.get("route_id"):
                    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
                    optimization_points = [
                        {
                            "id": "pickup",
                            "lat": first_order["pickup_location"]["lat"],
                            "lng": first_order["pickup_location"]["lng"],
                            "demand": 0,
                            "time_window": (0, 1440)
                        },
                        {
                            "id": "delivery",
                            "lat": first_order["delivery_location"]["lat"],
                            "lng": first_order["delivery_location"]["lng"],
                            "demand": first_order["weight"],
                            "time_window": (480, 720)
                        }
                    ]
                    
                    vehicle_constraints = {
                        "capacity": 100,
                        "max_distance": 50.0,
                        "max_time": 240,
                        "speed_kmh": 40.0
                    }
                    
                    optimization_result = await self.optimization_service.optimize_nearest_neighbor(
                        optimization_points, vehicle_constraints
                    )
                    
                    self.log_test_result("integration", "complex_order_optimization", True)
                else:
                    self.log_test_result("integration", "complex_order_optimization", False, "Failed to create route")
            else:
                self.log_test_result("integration", "complex_order_optimization", False, "No test orders generated")
                
        except Exception as e:
            self.log_test_result("integration", "complex_order_optimization", False, str(e))
        
        try:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–∏–º—É–ª—è—Ü–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —É—Å–ª–æ–≤–∏–π –∏ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: –°–∏–º—É–ª—è—Ü–∏—è —Å –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            await self.simulation_service.start_simulation({
                "update_interval": 3,
                "traffic_variability": 0.8
            })
            
            # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
            await asyncio.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è
            conditions = self.simulation_service.get_current_conditions()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
            traffic_event = self.simulation_service.force_event(
                EventType.TRAFFIC_CHANGE,
                {"intensity": 0.8}
            )
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            await self.simulation_service.stop_simulation()
            
            self.log_test_result("integration", "simulation_with_reoptimization", True)
            
        except Exception as e:
            self.log_test_result("integration", "simulation_with_reoptimization", False, str(e))
        
        try:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            scenario_params = {
                "vehicle_capacity": 80,
                "max_route_distance": 150.0,
                "optimization_algorithm": "genetic"
            }
            
            scenario_id = self.parameter_service.create_test_scenario(
                "algorithm_comparison_test",
                scenario_params,
                "–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            test_points = [
                {"id": "depot", "lat": 55.7558, "lng": 37.6176, "demand": 0, "time_window": (0, 1440)},
                {"id": "c1", "lat": 55.7500, "lng": 37.6200, "demand": 20, "time_window": (480, 600)},
                {"id": "c2", "lat": 55.7600, "lng": 37.6100, "demand": 25, "time_window": (540, 720)}
            ]
            
            vehicle_constraints = {
                "capacity": scenario_params["vehicle_capacity"],
                "max_distance": scenario_params["max_route_distance"],
                "max_time": 480,
                "speed_kmh": 40.0
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            algorithms = [
                ("nearest_neighbor", self.optimization_service.optimize_nearest_neighbor),
                ("genetic_algorithm", lambda points, constraints: 
                 self.optimization_service.optimize_genetic_algorithm(points, constraints, 10, 5))
            ]
            
            results = {}
            for alg_name, alg_func in algorithms:
                try:
                    result = await alg_func(test_points, vehicle_constraints)
                    results[alg_name] = result
                except Exception as e:
                    logger.warning(f"–ê–ª–≥–æ—Ä–∏—Ç–º {alg_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            
            self.log_test_result("integration", "parameter_algorithm_testing", len(results) > 0)
            
        except Exception as e:
            self.log_test_result("integration", "parameter_algorithm_testing", False, str(e))
    
    def generate_test_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_passed = sum(module["passed"] for module in self.test_results.values())
        total_failed = sum(module["failed"] for module in self.test_results.values())
        total_tests = total_passed + total_failed
        
        success_rate = (total_passed / total_tests * 100) if total_tests > 0 else 0
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": total_tests,
                "passed": total_passed,
                "failed": total_failed,
                "success_rate": round(success_rate, 2)
            },
            "modules": self.test_results,
            "status": "PASSED" if total_failed == 0 else "FAILED"
        }
        
        return report
    
    def print_test_report(self, report: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*80)
        print("üß™ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–û–î–£–õ–ï–ô RUT MIIT")
        print("="*80)
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['timestamp']}")
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ PASSED' if report['status'] == 'PASSED' else '‚ùå FAILED'}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']}%")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['summary']['total_tests']}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {report['summary']['passed']}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {report['summary']['failed']}")
        print("\n" + "-"*80)
        print("–î–ï–¢–ê–õ–ò –ü–û –ú–û–î–£–õ–Ø–ú:")
        print("-"*80)
        
        for module_name, module_results in report['modules'].items():
            total_module_tests = module_results['passed'] + module_results['failed']
            if total_module_tests > 0:
                module_success_rate = (module_results['passed'] / total_module_tests * 100)
                status_icon = "‚úÖ" if module_results['failed'] == 0 else "‚ùå"
                
                print(f"{status_icon} {module_name.upper().replace('_', ' ')}")
                print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {module_results['passed']}")
                print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {module_results['failed']}")
                print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {module_success_rate:.1f}%")
                
                if module_results['errors']:
                    print("   –û—à–∏–±–∫–∏:")
                    for error in module_results['errors']:
                        print(f"     ‚Ä¢ {error}")
                print()
        
        print("="*80)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã RUT MIIT...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º
        await self.test_driver_management()
        await self.test_route_management()
        await self.test_route_optimization()
        await self.test_parameter_modification()
        await self.test_realtime_simulation()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_integration_scenarios()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        report = self.generate_test_report()
        self.print_test_report(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"integration_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")
        
        return report

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IntegrationTester()
    report = await tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    exit_code = 0 if report['status'] == 'PASSED' else 1
    sys.exit(exit_code)

if __name__ == "__main__":
    asyncio.run(main())