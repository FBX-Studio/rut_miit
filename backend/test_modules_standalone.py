#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ RUT MIIT
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Any
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.route_optimization import RouteOptimizationService
from app.services.parameter_modification import ParameterModificationService
from app.services.realtime_simulation import RealtimeSimulationService, EventType
from advanced_test_data_generator import AdvancedTestDataGenerator, TestConfiguration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class StandaloneModuleTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self):
        self.optimization_service = RouteOptimizationService()
        self.parameter_service = ParameterModificationService()
        self.simulation_service = RealtimeSimulationService()
        self.test_data_generator = AdvancedTestDataGenerator()
        
        self.test_results = {
            "route_optimization": {"passed": 0, "failed": 0, "errors": []},
            "parameter_modification": {"passed": 0, "failed": 0, "errors": []},
            "realtime_simulation": {"passed": 0, "failed": 0, "errors": []},
            "test_data_generation": {"passed": 0, "failed": 0, "errors": []},
            "integration": {"passed": 0, "failed": 0, "errors": []}
        }
    
    def log_test_result(self, module: str, test_name: str, success: bool, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        if success:
            self.test_results[module]["passed"] += 1
            logger.info(f"‚úÖ {module}: {test_name} - PASSED")
        else:
            self.test_results[module]["failed"] += 1
            self.test_results[module]["errors"].append(f"{test_name}: {error}")
            logger.error(f"‚ùå {module}: {test_name} - FAILED: {error}")
    
    async def test_route_optimization(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_points = [
            {"id": "depot", "lat": 55.7558, "lng": 37.6176, "demand": 0, "time_window": (0, 1440)},
            {"id": "customer1", "lat": 55.7500, "lng": 37.6200, "demand": 10, "time_window": (480, 600)},
            {"id": "customer2", "lat": 55.7600, "lng": 37.6100, "demand": 15, "time_window": (540, 720)},
            {"id": "customer3", "lat": 55.7400, "lng": 37.6300, "demand": 8, "time_window": (600, 800)},
            {"id": "customer4", "lat": 55.7650, "lng": 37.6050, "demand": 12, "time_window": (420, 660)}
        ]
        
        vehicle_constraints = {
            "capacity": 50,
            "max_distance": 100.0,
            "max_time": 480,
            "speed_kmh": 40.0
        }
        
        try:
            # –¢–µ—Å—Ç 1: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–ª–∏–∂–∞–π—à–∏–º —Å–æ—Å–µ–¥–æ–º
            result = await self.optimization_service.optimize_nearest_neighbor(
                test_points, vehicle_constraints
            )
            success = result and "route" in result and len(result["route"]) > 0
            self.log_test_result("route_optimization", "nearest_neighbor", success)
            if success:
                logger.info(f"   –ú–∞—Ä—à—Ä—É—Ç: {' -> '.join(result['route'])}")
                logger.info(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result.get('total_distance', 0):.2f} –∫–º")
                logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {result.get('total_time', 0):.2f} –º–∏–Ω")
        except Exception as e:
            self.log_test_result("route_optimization", "nearest_neighbor", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
            result = await self.optimization_service.optimize_genetic_algorithm(
                test_points, vehicle_constraints, population_size=20, generations=10
            )
            success = result and "route" in result and len(result["route"]) > 0
            self.log_test_result("route_optimization", "genetic_algorithm", success)
            if success:
                logger.info(f"   –õ—É—á—à–∏–π –º–∞—Ä—à—Ä—É—Ç: {' -> '.join(result['route'])}")
                logger.info(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result.get('total_distance', 0):.2f} –∫–º")
        except Exception as e:
            self.log_test_result("route_optimization", "genetic_algorithm", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ê–ª–≥–æ—Ä–∏—Ç–º –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞
            result = await self.optimization_service.optimize_simulated_annealing(
                test_points, vehicle_constraints, max_iterations=100
            )
            success = result and "route" in result and len(result["route"]) > 0
            self.log_test_result("route_optimization", "simulated_annealing", success)
            if success:
                logger.info(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {' -> '.join(result['route'])}")
        except Exception as e:
            self.log_test_result("route_optimization", "simulated_annealing", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 4: –ú—É—Ä–∞–≤—å–∏–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            result = await self.optimization_service.optimize_ant_colony(
                test_points, vehicle_constraints, num_ants=10, iterations=20
            )
            success = result and "route" in result and len(result["route"]) > 0
            self.log_test_result("route_optimization", "ant_colony", success)
        except Exception as e:
            self.log_test_result("route_optimization", "ant_colony", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 5: –ê–ª–≥–æ—Ä–∏—Ç–º –ö–ª–∞—Ä–∫–∞-–†–∞–π—Ç–∞
            result = await self.optimization_service.optimize_clarke_wright(
                test_points, vehicle_constraints
            )
            success = result and "routes" in result and len(result["routes"]) > 0
            self.log_test_result("route_optimization", "clarke_wright", success)
        except Exception as e:
            self.log_test_result("route_optimization", "clarke_wright", False, str(e))
    
    async def test_parameter_modification(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            definitions = self.parameter_service.get_parameter_definitions()
            success = isinstance(definitions, dict) and len(definitions) > 0
            self.log_test_result("parameter_modification", "get_parameter_definitions", success)
            if success:
                logger.info(f"   –ù–∞–π–¥–µ–Ω–æ {len(definitions)} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            self.log_test_result("parameter_modification", "get_parameter_definitions", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            categories = self.parameter_service.get_parameter_categories()
            success = isinstance(categories, list) and len(categories) > 0
            self.log_test_result("parameter_modification", "get_parameter_categories", success)
            if success:
                logger.info(f"   –ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            self.log_test_result("parameter_modification", "get_parameter_categories", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_params = {
                "vehicle_capacity": 100,
                "max_route_distance": 200.0,
                "delivery_time_window": 120,
                "traffic_multiplier": 1.2
            }
            
            scenario_id = self.parameter_service.create_test_scenario(
                "integration_test_scenario",
                scenario_params,
                "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            success = scenario_id is not None
            self.log_test_result("parameter_modification", "create_test_scenario", success)
            self.test_scenario_id = scenario_id if success else None
            
        except Exception as e:
            self.log_test_result("parameter_modification", "create_test_scenario", False, str(e))
            self.test_scenario_id = None
        
        if self.test_scenario_id:
            try:
                # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                scenario = self.parameter_service.get_test_scenario(self.test_scenario_id)
                success = scenario is not None and "parameters" in scenario
                self.log_test_result("parameter_modification", "get_test_scenario", success)
            except Exception as e:
                self.log_test_result("parameter_modification", "get_test_scenario", False, str(e))
            
            try:
                # –¢–µ—Å—Ç 5: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
                new_params = {"vehicle_capacity": 150, "max_route_distance": 250.0}
                self.parameter_service.modify_test_scenario(self.test_scenario_id, new_params)
                modified_scenario = self.parameter_service.get_test_scenario(self.test_scenario_id)
                success = (modified_scenario and 
                          modified_scenario["parameters"]["vehicle_capacity"] == 150)
                self.log_test_result("parameter_modification", "modify_test_scenario", success)
            except Exception as e:
                self.log_test_result("parameter_modification", "modify_test_scenario", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤
            presets = self.parameter_service.get_available_presets()
            success = isinstance(presets, dict) and len(presets) > 0
            self.log_test_result("parameter_modification", "get_available_presets", success)
            if success:
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω–æ {len(presets)} –ø—Ä–µ—Å–µ—Ç–æ–≤")
        except Exception as e:
            self.log_test_result("parameter_modification", "get_available_presets", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 7: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            valid_params = {"vehicle_capacity": 100, "max_route_distance": 200.0}
            invalid_params = {"vehicle_capacity": -10, "max_route_distance": "invalid"}
            
            valid_result = self.parameter_service.validate_parameters(valid_params)
            invalid_result = self.parameter_service.validate_parameters(invalid_params)
            
            success = valid_result.get("valid", False) and not invalid_result.get("valid", True)
            self.log_test_result("parameter_modification", "validate_parameters", success)
        except Exception as e:
            self.log_test_result("parameter_modification", "validate_parameters", False, str(e))
    
    async def test_realtime_simulation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        
        try:
            # –¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
            await self.simulation_service.start_simulation({
                "update_interval": 2,  # –ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                "traffic_variability": 0.5,
                "weather_change_probability": 0.3
            })
            await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            
            is_running = self.simulation_service.is_running()
            self.log_test_result("realtime_simulation", "start_simulation", is_running)
        except Exception as e:
            self.log_test_result("realtime_simulation", "start_simulation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            traffic_event = self.simulation_service.force_event(EventType.TRAFFIC_CHANGE)
            weather_event = self.simulation_service.force_event(EventType.WEATHER_CHANGE)
            
            success = traffic_event is not None and weather_event is not None
            self.log_test_result("realtime_simulation", "force_events", success)
            if success:
                logger.info(f"   –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_event.description}")
                logger.info(f"   –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ–≥–æ–¥—ã: {weather_event.description}")
        except Exception as e:
            self.log_test_result("realtime_simulation", "force_events", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
            conditions = self.simulation_service.get_current_conditions()
            success = (conditions and 
                      "traffic" in conditions and 
                      "weather" in conditions)
            self.log_test_result("realtime_simulation", "get_current_conditions", success)
            if success:
                logger.info(f"   –¢—Ä–∞—Ñ–∏–∫: {conditions['traffic']['intensity']}")
                logger.info(f"   –ü–æ–≥–æ–¥–∞: {conditions['weather']['condition']}")
        except Exception as e:
            self.log_test_result("realtime_simulation", "get_current_conditions", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.simulation_service.get_simulation_statistics()
            success = stats and "total_events" in stats
            self.log_test_result("realtime_simulation", "get_simulation_statistics", success)
            if success:
                logger.info(f"   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats['total_events']}")
                logger.info(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime_seconds', 0):.1f} —Å–µ–∫")
        except Exception as e:
            self.log_test_result("realtime_simulation", "get_simulation_statistics", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 5: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
            new_params = {
                "update_interval": 3,
                "traffic_variability": 0.8
            }
            self.simulation_service.update_simulation_parameters(new_params)
            self.log_test_result("realtime_simulation", "update_parameters", True)
        except Exception as e:
            self.log_test_result("realtime_simulation", "update_parameters", False, str(e))
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        await asyncio.sleep(3)
        
        try:
            # –¢–µ—Å—Ç 6: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
            await self.simulation_service.stop_simulation()
            is_stopped = not self.simulation_service.is_running()
            self.log_test_result("realtime_simulation", "stop_simulation", is_stopped)
        except Exception as e:
            self.log_test_result("realtime_simulation", "stop_simulation", False, str(e))
    
    async def test_data_generation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = TestConfiguration(
                num_customers=10,
                num_drivers=5,
                num_vehicles=3,
                geographic_center=[55.7558, 37.6176],
                geographic_radius=15.0
            )
            success = config is not None
            self.log_test_result("test_data_generation", "create_configuration", success)
        except Exception as e:
            self.log_test_result("test_data_generation", "create_configuration", False, str(e))
            return
        
        try:
            # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = self.test_data_generator.generate_comprehensive_test_data(config)
            success = (test_data and 
                      "customers" in test_data and 
                      "drivers" in test_data and 
                      "vehicles" in test_data and 
                      "orders" in test_data)
            self.log_test_result("test_data_generation", "generate_comprehensive_data", success)
            
            if success:
                logger.info(f"   –ö–ª–∏–µ–Ω—Ç—ã: {len(test_data['customers'])}")
                logger.info(f"   –í–æ–¥–∏—Ç–µ–ª–∏: {len(test_data['drivers'])}")
                logger.info(f"   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {len(test_data['vehicles'])}")
                logger.info(f"   –ó–∞–∫–∞–∑—ã: {len(test_data['orders'])}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
                self.test_data = test_data
                
        except Exception as e:
            self.log_test_result("test_data_generation", "generate_comprehensive_data", False, str(e))
            self.test_data = None
        
        try:
            # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            scenario_data = self.test_data_generator.generate_scenario_based_orders(
                config, "urban_delivery", 5
            )
            success = scenario_data and len(scenario_data) > 0
            self.log_test_result("test_data_generation", "generate_scenario_orders", success)
            if success:
                logger.info(f"   –°—Ü–µ–Ω–∞—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(scenario_data)}")
        except Exception as e:
            self.log_test_result("test_data_generation", "generate_scenario_orders", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_file = "test_config_temp.json"
            self.test_data_generator.save_configuration(config, config_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            success = os.path.exists(config_file)
            self.log_test_result("test_data_generation", "save_configuration", success)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if success:
                os.remove(config_file)
                
        except Exception as e:
            self.log_test_result("test_data_generation", "save_configuration", False, str(e))
    
    async def test_integration_scenarios(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        if not hasattr(self, 'test_data') or not self.test_data:
            self.log_test_result("integration", "data_availability", False, "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        try:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤
            orders = self.test_data["orders"][:4]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimization_points = [
                {"id": "depot", "lat": 55.7558, "lng": 37.6176, "demand": 0, "time_window": (0, 1440)}
            ]
            
            for i, order in enumerate(orders):
                optimization_points.append({
                    "id": f"order_{i}",
                    "lat": order["delivery_location"]["lat"],
                    "lng": order["delivery_location"]["lng"],
                    "demand": order["weight"],
                    "time_window": (480, 720)
                })
            
            vehicle_constraints = {
                "capacity": 100,
                "max_distance": 80.0,
                "max_time": 360,
                "speed_kmh": 35.0
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            algorithms = [
                ("nearest_neighbor", self.optimization_service.optimize_nearest_neighbor),
                ("genetic_algorithm", lambda points, constraints: 
                 self.optimization_service.optimize_genetic_algorithm(points, constraints, 15, 8))
            ]
            
            results = {}
            for alg_name, alg_func in algorithms:
                try:
                    result = await alg_func(optimization_points, vehicle_constraints)
                    if result and "route" in result:
                        results[alg_name] = result
                        logger.info(f"   {alg_name}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {result.get('total_distance', 0):.2f} –∫–º")
                except Exception as e:
                    logger.warning(f"   {alg_name}: –æ—à–∏–±–∫–∞ - {e}")
            
            success = len(results) > 0
            self.log_test_result("integration", "real_data_optimization", success)
            
        except Exception as e:
            self.log_test_result("integration", "real_data_optimization", False, str(e))
        
        try:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–∏–º—É–ª—è—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: –°–∏–º—É–ª—è—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            scenario_params = {
                "vehicle_capacity": 80,
                "max_route_distance": 120.0,
                "traffic_multiplier": 1.5,
                "weather_impact": 0.2
            }
            
            scenario_id = self.parameter_service.create_test_scenario(
                "integration_simulation_test",
                scenario_params,
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            await self.simulation_service.start_simulation({
                "update_interval": 1,
                "traffic_variability": scenario_params["traffic_multiplier"] - 1.0
            })
            
            # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è
            await asyncio.sleep(2)
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è
            conditions = self.simulation_service.get_current_conditions()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            await self.simulation_service.stop_simulation()
            
            success = conditions is not None and scenario_id is not None
            self.log_test_result("integration", "simulation_with_parameters", success)
            
        except Exception as e:
            self.log_test_result("integration", "simulation_with_parameters", False, str(e))
        
        try:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            configurations = [
                {"capacity": 50, "max_distance": 60.0, "name": "small_vehicle"},
                {"capacity": 100, "max_distance": 120.0, "name": "medium_vehicle"},
                {"capacity": 150, "max_distance": 200.0, "name": "large_vehicle"}
            ]
            
            test_points = [
                {"id": "depot", "lat": 55.7558, "lng": 37.6176, "demand": 0, "time_window": (0, 1440)},
                {"id": "c1", "lat": 55.7500, "lng": 37.6200, "demand": 20, "time_window": (480, 600)},
                {"id": "c2", "lat": 55.7600, "lng": 37.6100, "demand": 25, "time_window": (540, 720)},
                {"id": "c3", "lat": 55.7400, "lng": 37.6300, "demand": 15, "time_window": (600, 800)}
            ]
            
            comparison_results = {}
            for config in configurations:
                vehicle_constraints = {
                    "capacity": config["capacity"],
                    "max_distance": config["max_distance"],
                    "max_time": 300,
                    "speed_kmh": 40.0
                }
                
                try:
                    result = await self.optimization_service.optimize_nearest_neighbor(
                        test_points, vehicle_constraints
                    )
                    if result:
                        comparison_results[config["name"]] = {
                            "distance": result.get("total_distance", 0),
                            "time": result.get("total_time", 0),
                            "feasible": result.get("feasible", False)
                        }
                except Exception as e:
                    logger.warning(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config['name']}: –æ—à–∏–±–∫–∞ - {e}")
            
            success = len(comparison_results) > 0
            self.log_test_result("integration", "algorithm_comparison", success)
            
            if success:
                logger.info("   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
                for name, result in comparison_results.items():
                    logger.info(f"     {name}: {result['distance']:.2f} –∫–º, {result['time']:.2f} –º–∏–Ω")
            
        except Exception as e:
            self.log_test_result("integration", "algorithm_comparison", False, str(e))
    
    def generate_test_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_passed = sum(module["passed"] for module in self.test_results.values())
        total_failed = sum(module["failed"] for module in self.test_results.values())
        total_tests = total_passed + total_failed
        
        success_rate = (total_passed / total_tests * 100) if total_tests > 0 else 0
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": total_tests,
                "passed": total_passed,
                "failed": total_failed,
                "success_rate": round(success_rate, 2)
            },
            "modules": self.test_results,
            "status": "PASSED" if total_failed == 0 else "FAILED"
        }
        
        return report
    
    def print_test_report(self, report: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*80)
        print("üß™ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ú–û–î–£–õ–ï–ô –°–ò–°–¢–ï–ú–´ RUT MIIT")
        print("="*80)
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['timestamp']}")
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ PASSED' if report['status'] == 'PASSED' else '‚ùå FAILED'}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']}%")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['summary']['total_tests']}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {report['summary']['passed']}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {report['summary']['failed']}")
        print("\n" + "-"*80)
        print("–î–ï–¢–ê–õ–ò –ü–û –ú–û–î–£–õ–Ø–ú:")
        print("-"*80)
        
        for module_name, module_results in report['modules'].items():
            total_module_tests = module_results['passed'] + module_results['failed']
            if total_module_tests > 0:
                module_success_rate = (module_results['passed'] / total_module_tests * 100)
                status_icon = "‚úÖ" if module_results['failed'] == 0 else "‚ùå"
                
                print(f"{status_icon} {module_name.upper().replace('_', ' ')}")
                print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {module_results['passed']}")
                print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {module_results['failed']}")
                print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {module_success_rate:.1f}%")
                
                if module_results['errors']:
                    print("   –û—à–∏–±–∫–∏:")
                    for error in module_results['errors']:
                        print(f"     ‚Ä¢ {error}")
                print()
        
        print("="*80)
        print("üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        if report['status'] == 'PASSED':
            print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥—É–ª—è—Ö.")
            print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        print("="*80)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã RUT MIIT...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º
        await self.test_route_optimization()
        await self.test_parameter_modification()
        await self.test_realtime_simulation()
        await self.test_data_generation()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_integration_scenarios()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        report = self.generate_test_report()
        self.print_test_report(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"module_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")
        
        return report

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = StandaloneModuleTester()
    report = await tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    exit_code = 0 if report['status'] == 'PASSED' else 1
    sys.exit(exit_code)

if __name__ == "__main__":
    asyncio.run(main())