#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.core.config import settings
from app.models import Order, Vehicle, Driver, Customer
from app.api.schemas import OrderResponse, VehicleResponse, DriverResponse
import traceback

def test_api_data_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = settings.database_url
    engine = create_engine(database_url, connect_args={"check_same_thread": False})
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    with SessionLocal() as db:
        print("=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ===\n")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
        print("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:")
        try:
            orders = db.query(Order).limit(3).all()
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î: {len(orders)}")
            
            for order in orders:
                print(f"   –ó–∞–∫–∞–∑ ID {order.id}:")
                print(f"     - –°—Ç–∞—Ç—É—Å: {order.status}")
                print(f"     - –ê–¥—Ä–µ—Å: {order.delivery_address}")
                print(f"     - –ö–ª–∏–µ–Ω—Ç ID: {order.customer_id}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å OrderResponse
                try:
                    order_response = OrderResponse.from_orm(order)
                    print(f"     ‚úÖ OrderResponse —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OrderResponse: {e}")
                    print(f"     –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–∫–∞–∑–∞–º–∏: {e}")
            print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        print("üöõ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:")
        try:
            vehicles = db.query(Vehicle).limit(3).all()
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –ë–î: {len(vehicles)}")
            
            for vehicle in vehicles:
                print(f"   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ID {vehicle.id}:")
                print(f"     - –¢–∏–ø: {vehicle.vehicle_type}")
                print(f"     - –°—Ç–∞—Ç—É—Å: {vehicle.status}")
                print(f"     - –ù–æ–º–µ—Ä: {vehicle.license_plate}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å VehicleResponse
                try:
                    vehicle_response = VehicleResponse.from_orm(vehicle)
                    print(f"     ‚úÖ VehicleResponse —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VehicleResponse: {e}")
                    print(f"     –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º: {e}")
            print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
        print("üë®‚Äçüíº –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:")
        try:
            drivers = db.query(Driver).limit(3).all()
            print(f"   –ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –ë–î: {len(drivers)}")
            
            for driver in drivers:
                print(f"   –í–æ–¥–∏—Ç–µ–ª—å ID {driver.id}:")
                print(f"     - –ò–º—è: {driver.first_name} {driver.last_name}")
                print(f"     - –°—Ç–∞—Ç—É—Å: {driver.status}")
                print(f"     - –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å DriverResponse
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è DriverResponse
                    driver_data = {
                        'id': driver.id,
                        'employee_id': driver.employee_id,
                        'first_name': driver.first_name,
                        'last_name': driver.last_name,
                        'email': driver.email,
                        'phone': driver.phone,
                        'license_number': driver.license_number,
                        'license_expiry': driver.license_expiry,
                        'experience_level': driver.experience_level.value if driver.experience_level else None,
                        'years_of_experience': driver.years_of_experience,
                        'max_stops_per_route': driver.max_stops_per_route,
                        'max_working_hours': driver.max_working_hours,
                        'shift_start_time': driver.shift_start_time,
                        'shift_end_time': driver.shift_end_time,
                        'status': driver.status.value if driver.status else None,
                        'current_latitude': driver.current_latitude,
                        'current_longitude': driver.current_longitude,
                        'average_delivery_time': driver.average_delivery_time
                    }
                    
                    driver_response = DriverResponse(**driver_data)
                    print(f"     ‚úÖ DriverResponse —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DriverResponse: {e}")
                    print(f"     –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏: {e}")
            print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        
        print("\n=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    try:
        test_api_data_conversion()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        sys.exit(1)