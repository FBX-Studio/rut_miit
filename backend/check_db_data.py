#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö VRPTW
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.core.config import settings
from app.models import Order, Vehicle, Driver, Customer

def check_database_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = settings.database_url
    engine = create_engine(database_url, connect_args={"check_same_thread": False})
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    with SessionLocal() as db:
        print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
        orders_count = db.query(Order).count()
        print(f"üì¶ –ó–∞–∫–∞–∑—ã: {orders_count}")
        if orders_count > 0:
            pending_orders = db.query(Order).filter(Order.status == 'PENDING').count()
            print(f"   - –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_orders}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            sample_orders = db.query(Order).limit(3).all()
            for order in sample_orders:
                print(f"   - ID: {order.id}, –°—Ç–∞—Ç—É—Å: {order.status}, –ê–¥—Ä–µ—Å: {order.delivery_address}")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        vehicles_count = db.query(Vehicle).count()
        print(f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicles_count}")
        if vehicles_count > 0:
            available_vehicles = db.query(Vehicle).filter(Vehicle.status == 'AVAILABLE').count()
            print(f"   - –î–æ—Å—Ç—É–ø–Ω–æ: {available_vehicles}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            sample_vehicles = db.query(Vehicle).limit(3).all()
            for vehicle in sample_vehicles:
                print(f"   - ID: {vehicle.id}, –¢–∏–ø: {vehicle.vehicle_type}, –°—Ç–∞—Ç—É—Å: {vehicle.status}")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers_count = db.query(Driver).count()
        print(f"üë®‚Äçüíº –í–æ–¥–∏—Ç–µ–ª–∏: {drivers_count}")
        if drivers_count > 0:
            available_drivers = db.query(Driver).filter(Driver.status == 'AVAILABLE').count()
            print(f"   - –î–æ—Å—Ç—É–ø–Ω–æ: {available_drivers}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            sample_drivers = db.query(Driver).limit(3).all()
            for driver in sample_drivers:
                full_name = f"{driver.first_name} {driver.last_name}"
                print(f"   - ID: {driver.id}, –ò–º—è: {full_name}, –°—Ç–∞—Ç—É—Å: {driver.status}")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        customers_count = db.query(Customer).count()
        print(f"üë• –ö–ª–∏–µ–Ω—Ç—ã: {customers_count}")
        if customers_count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            sample_customers = db.query(Customer).limit(3).all()
            for customer in sample_customers:
                print(f"   - ID: {customer.id}, –ò–º—è: {customer.name}, –ì–æ—Ä–æ–¥: {customer.city}")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:")
        orders_with_customers = db.query(Order).filter(Order.customer_id.isnot(None)).count()
        print(f"   - –ó–∞–∫–∞–∑—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {orders_with_customers}/{orders_count}")
        
        vehicles_with_drivers = db.query(Vehicle).filter(Vehicle.driver_id.isnot(None)).count()
        print(f"   - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏: {vehicles_with_drivers}/{vehicles_count}")
        
        print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    try:
        check_database_data()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)