#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ RUT MIIT
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import asyncio
import json
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Any
import logging
import math

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.route_optimization import RouteOptimizationService
from app.services.parameter_modification import ParameterModificationService
from app.services.realtime_simulation import RealtimeSimulationService, EventType
from advanced_test_data_generator import AdvancedTestDataGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class BasicFunctionalityTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.optimization_service = RouteOptimizationService()
        self.parameter_service = ParameterModificationService()
        self.simulation_service = RealtimeSimulationService()
        self.test_data_generator = AdvancedTestDataGenerator()
        
        self.test_results = {
            "route_optimization": {"passed": 0, "failed": 0, "errors": []},
            "parameter_modification": {"passed": 0, "failed": 0, "errors": []},
            "realtime_simulation": {"passed": 0, "failed": 0, "errors": []},
            "test_data_generation": {"passed": 0, "failed": 0, "errors": []},
            "basic_calculations": {"passed": 0, "failed": 0, "errors": []}
        }
    
    def log_test_result(self, module: str, test_name: str, success: bool, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        if success:
            self.test_results[module]["passed"] += 1
            logger.info(f"‚úÖ {module}: {test_name} - PASSED")
        else:
            self.test_results[module]["failed"] += 1
            self.test_results[module]["errors"].append(f"{test_name}: {error}")
            logger.error(f"‚ùå {module}: {test_name} - FAILED: {error}")
    
    async def test_route_optimization_basic(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        logger.info("üß™ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_points = [
            {"id": "depot", "lat": 55.7558, "lng": 37.6176, "demand": 0, "time_window": (0, 1440)},
            {"id": "customer1", "lat": 55.7500, "lng": 37.6200, "demand": 10, "time_window": (480, 600)},
            {"id": "customer2", "lat": 55.7600, "lng": 37.6100, "demand": 15, "time_window": (540, 720)}
        ]
        
        vehicle_constraints = {
            "capacity": 50,
            "max_distance": 100.0,
            "max_time": 480,
            "speed_kmh": 40.0
        }
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è
            service_created = self.optimization_service is not None
            self.log_test_result("route_optimization", "service_creation", service_created)
        except Exception as e:
            self.log_test_result("route_optimization", "service_creation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            if hasattr(self.optimization_service, 'calculate_distance'):
                distance = self.optimization_service.calculate_distance(
                    55.7558, 37.6176, 55.7500, 37.6200
                )
                success = distance > 0
                self.log_test_result("route_optimization", "calculate_distance", success)
                if success:
                    logger.info(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º")
            else:
                self.log_test_result("route_optimization", "calculate_distance", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("route_optimization", "calculate_distance", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–æ—Å–µ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(self.optimization_service, 'optimize_nearest_neighbor'):
                result = await self.optimization_service.optimize_nearest_neighbor(
                    test_points, vehicle_constraints
                )
                success = result is not None
                self.log_test_result("route_optimization", "nearest_neighbor", success)
            else:
                self.log_test_result("route_optimization", "nearest_neighbor", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("route_optimization", "nearest_neighbor", False, str(e))
    
    async def test_parameter_modification_basic(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        logger.info("üß™ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            service_created = self.parameter_service is not None
            self.log_test_result("parameter_modification", "service_creation", service_created)
        except Exception as e:
            self.log_test_result("parameter_modification", "service_creation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if hasattr(self.parameter_service, 'get_parameter_definitions'):
                definitions = self.parameter_service.get_parameter_definitions()
                success = definitions is not None
                self.log_test_result("parameter_modification", "get_parameter_definitions", success)
                if success and isinstance(definitions, dict):
                    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {len(definitions)}")
            else:
                self.log_test_result("parameter_modification", "get_parameter_definitions", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("parameter_modification", "get_parameter_definitions", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if hasattr(self.parameter_service, 'get_parameter_categories'):
                categories = self.parameter_service.get_parameter_categories()
                success = categories is not None
                self.log_test_result("parameter_modification", "get_parameter_categories", success)
            else:
                self.log_test_result("parameter_modification", "get_parameter_categories", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("parameter_modification", "get_parameter_categories", False, str(e))
    
    async def test_realtime_simulation_basic(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        logger.info("üß™ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏...")
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            service_created = self.simulation_service is not None
            self.log_test_result("realtime_simulation", "service_creation", service_created)
        except Exception as e:
            self.log_test_result("realtime_simulation", "service_creation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
            if hasattr(self.simulation_service, 'start_simulation'):
                await self.simulation_service.start_simulation({
                    "update_interval": 5,
                    "traffic_variability": 0.5
                })
                self.log_test_result("realtime_simulation", "start_simulation", True)
            else:
                self.log_test_result("realtime_simulation", "start_simulation", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("realtime_simulation", "start_simulation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            if hasattr(self.simulation_service, 'force_event'):
                event = self.simulation_service.force_event(EventType.TRAFFIC_CHANGE)
                success = event is not None
                self.log_test_result("realtime_simulation", "force_event", success)
            else:
                self.log_test_result("realtime_simulation", "force_event", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("realtime_simulation", "force_event", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 4: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
            if hasattr(self.simulation_service, 'stop_simulation'):
                await self.simulation_service.stop_simulation()
                self.log_test_result("realtime_simulation", "stop_simulation", True)
            else:
                self.log_test_result("realtime_simulation", "stop_simulation", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("realtime_simulation", "stop_simulation", False, str(e))
    
    async def test_data_generation_basic(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üß™ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            generator_created = self.test_data_generator is not None
            self.log_test_result("test_data_generation", "generator_creation", generator_created)
        except Exception as e:
            self.log_test_result("test_data_generation", "generator_creation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
            if hasattr(self.test_data_generator, 'generate_customers'):
                customers = self.test_data_generator.generate_customers(5, [55.7558, 37.6176], 10.0)
                success = customers is not None and len(customers) > 0
                self.log_test_result("test_data_generation", "generate_customers", success)
                if success:
                    logger.info(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(customers)}")
            else:
                self.log_test_result("test_data_generation", "generate_customers", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("test_data_generation", "generate_customers", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª–µ–π
            if hasattr(self.test_data_generator, 'generate_drivers'):
                drivers = self.test_data_generator.generate_drivers(3)
                success = drivers is not None and len(drivers) > 0
                self.log_test_result("test_data_generation", "generate_drivers", success)
                if success:
                    logger.info(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(drivers)}")
            else:
                self.log_test_result("test_data_generation", "generate_drivers", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("test_data_generation", "generate_drivers", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if hasattr(self.test_data_generator, 'generate_vehicles'):
                vehicles = self.test_data_generator.generate_vehicles(2)
                success = vehicles is not None and len(vehicles) > 0
                self.log_test_result("test_data_generation", "generate_vehicles", success)
                if success:
                    logger.info(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {len(vehicles)}")
            else:
                self.log_test_result("test_data_generation", "generate_vehicles", False, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_test_result("test_data_generation", "generate_vehicles", False, str(e))
    
    async def test_basic_calculations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π...")
        
        try:
            # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ Haversine
            def haversine_distance(lat1, lon1, lat2, lon2):
                R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
                
                lat1_rad = math.radians(lat1)
                lon1_rad = math.radians(lon1)
                lat2_rad = math.radians(lat2)
                lon2_rad = math.radians(lon2)
                
                dlat = lat2_rad - lat1_rad
                dlon = lon2_rad - lon1_rad
                
                a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2
                c = 2 * math.asin(math.sqrt(a))
                
                return R * c
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –º–µ–∂–¥—É –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é –∏ –¢–≤–µ—Ä—Å–∫–æ–π
            distance = haversine_distance(55.7558, 37.6176, 55.7500, 37.6200)
            success = 0.5 < distance < 2.0  # –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—É–º–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            self.log_test_result("basic_calculations", "haversine_distance", success)
            if success:
                logger.info(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ Haversine: {distance:.2f} –∫–º")
        except Exception as e:
            self.log_test_result("basic_calculations", "haversine_distance", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–∞–¥–∏—É—Å–µ
            def generate_random_location(center_lat, center_lng, radius_km):
                import random
                
                # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                lat_offset = (random.random() - 0.5) * (radius_km / 111.0)  # ~111 –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç—ã
                lng_offset = (random.random() - 0.5) * (radius_km / (111.0 * math.cos(math.radians(center_lat))))
                
                return {
                    "lat": center_lat + lat_offset,
                    "lng": center_lng + lng_offset
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫
            center = [55.7558, 37.6176]
            locations = []
            for _ in range(5):
                loc = generate_random_location(center[0], center[1], 10.0)
                locations.append(loc)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ—á–∫–∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            all_valid = all(
                54.0 < loc["lat"] < 57.0 and 36.0 < loc["lng"] < 39.0 
                for loc in locations
            )
            
            self.log_test_result("basic_calculations", "random_location_generation", all_valid)
            if all_valid:
                logger.info(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(locations)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π")
        except Exception as e:
            self.log_test_result("basic_calculations", "random_location_generation", False, str(e))
        
        try:
            # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–ª–∏–∂–∞–π—à–∏–º —Å–æ—Å–µ–¥–æ–º
            def simple_nearest_neighbor(points):
                if len(points) < 2:
                    return points
                
                route = [points[0]]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
                remaining = points[1:]
                
                while remaining:
                    current = route[-1]
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É
                    nearest = min(remaining, key=lambda p: haversine_distance(
                        current["lat"], current["lng"], p["lat"], p["lng"]
                    ))
                    route.append(nearest)
                    remaining.remove(nearest)
                
                return route
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏
            test_points = [
                {"id": "A", "lat": 55.7558, "lng": 37.6176},
                {"id": "B", "lat": 55.7500, "lng": 37.6200},
                {"id": "C", "lat": 55.7600, "lng": 37.6100},
                {"id": "D", "lat": 55.7400, "lng": 37.6300}
            ]
            
            optimized_route = simple_nearest_neighbor(test_points)
            success = len(optimized_route) == len(test_points)
            self.log_test_result("basic_calculations", "simple_nearest_neighbor", success)
            
            if success:
                route_ids = [p["id"] for p in optimized_route]
                logger.info(f"   –ú–∞—Ä—à—Ä—É—Ç: {' -> '.join(route_ids)}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                total_distance = 0
                for i in range(len(optimized_route) - 1):
                    p1, p2 = optimized_route[i], optimized_route[i + 1]
                    total_distance += haversine_distance(p1["lat"], p1["lng"], p2["lat"], p2["lng"])
                
                logger.info(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance:.2f} –∫–º")
                
        except Exception as e:
            self.log_test_result("basic_calculations", "simple_nearest_neighbor", False, str(e))
    
    def generate_test_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_passed = sum(module["passed"] for module in self.test_results.values())
        total_failed = sum(module["failed"] for module in self.test_results.values())
        total_tests = total_passed + total_failed
        
        success_rate = (total_passed / total_tests * 100) if total_tests > 0 else 0
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": total_tests,
                "passed": total_passed,
                "failed": total_failed,
                "success_rate": round(success_rate, 2)
            },
            "modules": self.test_results,
            "status": "PASSED" if total_failed == 0 else "PARTIAL" if total_passed > 0 else "FAILED"
        }
        
        return report
    
    def print_test_report(self, report: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*80)
        print("üß™ –û–¢–ß–ï–¢ –û –ë–ê–ó–û–í–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´ RUT MIIT")
        print("="*80)
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['timestamp']}")
        
        status_icons = {
            "PASSED": "‚úÖ PASSED",
            "PARTIAL": "‚ö†Ô∏è PARTIAL",
            "FAILED": "‚ùå FAILED"
        }
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_icons.get(report['status'], report['status'])}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']}%")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['summary']['total_tests']}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {report['summary']['passed']}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {report['summary']['failed']}")
        print("\n" + "-"*80)
        print("–î–ï–¢–ê–õ–ò –ü–û –ú–û–î–£–õ–Ø–ú:")
        print("-"*80)
        
        for module_name, module_results in report['modules'].items():
            total_module_tests = module_results['passed'] + module_results['failed']
            if total_module_tests > 0:
                module_success_rate = (module_results['passed'] / total_module_tests * 100)
                status_icon = "‚úÖ" if module_results['failed'] == 0 else "‚ö†Ô∏è" if module_results['passed'] > 0 else "‚ùå"
                
                print(f"{status_icon} {module_name.upper().replace('_', ' ')}")
                print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {module_results['passed']}")
                print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {module_results['failed']}")
                print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {module_success_rate:.1f}%")
                
                if module_results['errors']:
                    print("   –ü—Ä–æ–±–ª–µ–º—ã:")
                    for error in module_results['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                        print(f"     ‚Ä¢ {error}")
                    if len(module_results['errors']) > 3:
                        print(f"     ... –∏ –µ—â–µ {len(module_results['errors']) - 3} –æ—à–∏–±–æ–∫")
                print()
        
        print("="*80)
        print("üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        if report['status'] == 'PASSED':
            print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        elif report['status'] == 'PARTIAL':
            print("‚ö†Ô∏è  –ß–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞!")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.")
        print("="*80)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã RUT MIIT...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_route_optimization_basic()
        await self.test_parameter_modification_basic()
        await self.test_realtime_simulation_basic()
        await self.test_data_generation_basic()
        await self.test_basic_calculations()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        report = self.generate_test_report()
        self.print_test_report(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"basic_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")
        
        return report

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BasicFunctionalityTester()
    report = await tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞: 0 –¥–ª—è PASSED, 1 –¥–ª—è PARTIAL, 2 –¥–ª—è FAILED
    exit_codes = {"PASSED": 0, "PARTIAL": 1, "FAILED": 2}
    exit_code = exit_codes.get(report['status'], 2)
    sys.exit(exit_code)

if __name__ == "__main__":
    asyncio.run(main())